@{grid-prefix} {
  .row.no-gutters {
    margin-left: 0;
    margin-right: 0;
    div[class^="col-"], div[class*=" col-"] {
      padding-left: 0;
      padding-right: 0;
    }
  }

  // **************************************************
  // bui 24 col grid generator (fork of bootstrap grid)
  // **************************************************

  // Container widths
  //
  // Set the container width, and override it for fixed navbars in media queries.

  .container {
    .bui-container-fixed();

    @media (min-width: @screen-sm-min) {
      width: @container-sm;
    }
    @media (min-width: @screen-md-min) {
      width: @container-md;
    }
    @media (min-width: @screen-lg-min) {
      width: @container-lg;
    }
  }

  // Fluid container
  //
  // Utilizes the mixin meant for fixed width containers, but without any defined
  // width for fluid, full width layouts.

  .container-fluid {
    .bui-container-fixed();
  }

  // Row
  //
  // Rows contain and clear the floats of your columns.

  .row {
    .bui-make-row();
  }

  // Columns
  //
  // Common styles for small and large grid columns

  .bui-make-grid-columns();

  // Extra small grid
  //
  // Columns, offsets, pushes, and pulls for extra small devices like
  // smartphones.

  .bui-make-grid(xs);

  // Small grid
  //
  // Columns, offsets, pushes, and pulls for the small device range, from phones
  // to tablets.

  @media (min-width: @screen-sm-min) {
    .bui-make-grid(sm);
  }

  // Medium grid
  //
  // Columns, offsets, pushes, and pulls for the desktop device range.

  @media (min-width: @screen-md-min) {
    .bui-make-grid(md);
  }

  // Large grid
  //
  // Columns, offsets, pushes, and pulls for the large desktop device range.

  @media (min-width: @screen-lg-min) {
    .bui-make-grid(lg);
  }
}

// end @{grid-prefix}

// Grid System Generation
// !!! Copied from bootstrap/less/mixens.less so that @grid-columns variable can be replaced with @bui-grid-columns & bui prefix can be applied to functions, there by building a second grid system.
// -----------

// Centered container element
.bui-container-fixed() {
  margin-right: auto;
  margin-left: auto;
  padding-left: (@grid-gutter-width / 2);
  padding-right: (@grid-gutter-width / 2);
  &:extend(.clearfix all);
}

// Creates a wrapper for a series of columns
.bui-make-row(@gutter: @grid-gutter-width) {
  margin-left: (@gutter / -2);
  margin-right: (@gutter / -2);
  &:extend(.clearfix all);
}

// Generate the extra small columns
.bui-make-xs-column(@columns; @gutter: @grid-gutter-width) {
  position: relative;
  float: left;
  width: percentage((@columns / @bui-grid-columns));
  min-height: 1px;
  padding-left: (@gutter / 2);
  padding-right: (@gutter / 2);
}

.bui-make-xs-column-offset(@columns) {
  @media (min-width: @screen-xs-min) {
    margin-left: percentage((@columns / @bui-grid-columns));
  }
}

.bui-make-xs-column-push(@columns) {
  @media (min-width: @screen-xs-min) {
    left: percentage((@columns / @bui-grid-columns));
  }
}

.bui-make-xs-column-pull(@columns) {
  @media (min-width: @screen-xs-min) {
    right: percentage((@columns / @bui-grid-columns));
  }
}

// Generate the small columns
.bui-make-sm-column(@columns; @gutter: @grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left: (@gutter / 2);
  padding-right: (@gutter / 2);

  @media (min-width: @screen-sm-min) {
    float: left;
    width: percentage((@columns / @bui-grid-columns));
  }
}

.bui-make-sm-column-offset(@columns) {
  @media (min-width: @screen-sm-min) {
    margin-left: percentage((@columns / @bui-grid-columns));
  }
}

.bui-make-sm-column-push(@columns) {
  @media (min-width: @screen-sm-min) {
    left: percentage((@columns / @bui-grid-columns));
  }
}

.bui-make-sm-column-pull(@columns) {
  @media (min-width: @screen-sm-min) {
    right: percentage((@columns / @bui-grid-columns));
  }
}

// Generate the medium columns
.bui-make-md-column(@columns; @gutter: @grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left: (@gutter / 2);
  padding-right: (@gutter / 2);

  @media (min-width: @screen-md-min) {
    float: left;
    width: percentage((@columns / @bui-grid-columns));
  }
}

.bui-make-md-column-offset(@columns) {
  @media (min-width: @screen-md-min) {
    margin-left: percentage((@columns / @bui-grid-columns));
  }
}

.bui-make-md-column-push(@columns) {
  @media (min-width: @screen-md-min) {
    left: percentage((@columns / @bui-grid-columns));
  }
}

.bui-make-md-column-pull(@columns) {
  @media (min-width: @screen-md-min) {
    right: percentage((@columns / @bui-grid-columns));
  }
}

// Generate the large columns
.bui-make-lg-column(@columns; @gutter: @grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left: (@gutter / 2);
  padding-right: (@gutter / 2);

  @media (min-width: @screen-lg-min) {
    float: left;
    width: percentage((@columns / @bui-grid-columns));
  }
}

.bui-make-lg-column-offset(@columns) {
  @media (min-width: @screen-lg-min) {
    margin-left: percentage((@columns / @bui-grid-columns));
  }
}

.bui-make-lg-column-push(@columns) {
  @media (min-width: @screen-lg-min) {
    left: percentage((@columns / @bui-grid-columns));
  }
}

.bui-make-lg-column-pull(@columns) {
  @media (min-width: @screen-lg-min) {
    right: percentage((@columns / @bui-grid-columns));
  }
}

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `@bui-grid-columns`.

.bui-make-grid-columns() {
  // Common styles for all sizes of grid columns, widths 1-12
  .col(@index) when (@index = 1) {
    // initial
    @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @bui-grid-columns) {
    // general; "=<" isn't a typo
    @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @bui-grid-columns) {
    // terminal
    @{list} {
      position: relative;
      // Prevent columns from collapsing when empty
      min-height: 1px;
      // Inner gutter via padding
      padding-left: (@grid-gutter-width / 2);
      padding-right: (@grid-gutter-width / 2);
    }
  }
  .col(1); // kickstart it
}

.bui-float-grid-columns(@class) {
  .col(@index) when (@index = 1) {
    // initial
    @item: ~".col-@{class}-@{index}";
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @bui-grid-columns) {
    // general
    @item: ~".col-@{class}-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @bui-grid-columns) {
    // terminal
    @{list} {
      float: left;
    }
  }
  .col(1); // kickstart it
}

.bui-calc-grid-column(@index, @class, @type) when (@type = width) and (@index > 0) {
  .col-@{class}-@{index} {
    width: percentage((@index / @bui-grid-columns));
  }
}

.bui-calc-grid-column(@index, @class, @type) when (@type = push) {
  .col-@{class}-push-@{index} {
    left: percentage((@index / @bui-grid-columns));
  }
}

.bui-calc-grid-column(@index, @class, @type) when (@type = pull) {
  .col-@{class}-pull-@{index} {
    right: percentage((@index / @bui-grid-columns));
  }
}

.bui-calc-grid-column(@index, @class, @type) when (@type = offset) {
  .col-@{class}-offset-@{index} {
    margin-left: percentage((@index / @bui-grid-columns));
  }
}

// Basic looping in LESS
.bui-loop-grid-columns(@index, @class, @type) when (@index >= 0) {
  .bui-calc-grid-column(@index, @class, @type);
  // next iteration
  .bui-loop-grid-columns((@index - 1), @class, @type);
}

// Create grid for specific class
.bui-make-grid(@class) {
  .bui-float-grid-columns(@class);
  .bui-loop-grid-columns(@bui-grid-columns, @class, width);
  .bui-loop-grid-columns(@bui-grid-columns, @class, pull);
  .bui-loop-grid-columns(@bui-grid-columns, @class, push);
  .bui-loop-grid-columns(@bui-grid-columns, @class, offset);
}
